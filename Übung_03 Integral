#include <iostream>

using namespace std;

double function(double  _x)	// f(x) = xÂ²
{
	return pow(_x, 2);
}

double getIntegralRectangle()
{

	int a;
	int b; 
	int intervals;

	cout << "Enter a ,b and Intervals: ";

	cin >> a;			// 0
	cin >> b;			// 2
	cin >> intervals;	// 4

	double deltaX = (double)(b - a) / intervals;		//0.5

	double undersum = 0;
	double oversum = 0;

	for (double i = a; i < b; i += deltaX)	// i = 0	i= 0.5		i=1		i=1.5
	{
		undersum += function(i);
		oversum += function(i + deltaX);
	}

	undersum *= deltaX;
	oversum *= deltaX;

	return (undersum + oversum) / 2;
}

double getIntegralTrapez()
{
	int a;
	int b;
	int intervals;

	cout << "Enter a ,b and Intervals: ";

	cin >> a;			// 0
	cin >> b;			// 2
	cin >> intervals;	// 4

	double deltaX = (double)(b - a) / intervals;		//0.5

	double innerSum = 0;

	for (double i = a; i < b; i += deltaX)
	{
		innerSum += function(i) + function(i + deltaX);
	}

	return innerSum * deltaX / 2;
}

double getIntegralSimpson()
{
	int a;
	int b;
	int intervals;

	cout << "Enter a ,b and Intervals: ";

	cin >> a;			// 0
	cin >> b;			// 2
	cin >> intervals;	// 4

	double deltaX = (double)(b - a) / intervals;		//0.5

	double innerSum = 0;
	int index = 0;

	for (double i = a; i <= b; i += deltaX)		// 0 ->	0.5 -> 1 -> 1.5
	{
		if (index == 0 || index == intervals) innerSum += function(i);
		else innerSum += (index % 2 == 1 ? 4 : 2) * function(i);

		index++;
	}

	return (deltaX / 3) * innerSum;
}


int main()
{
	//cout << getIntegralRectangle();
	//cout << getIntegralTrapez();
	cout << getIntegralSimpson();

	return 0;
}
