/*
Aufgabe 1
Schreiben Sie ein Programm, welches die LÃ¶sung einer Differentialgleichung erster Ordnung approximiert.
Implementieren Sie dabei das Euler-Cauchy-Verfahren, Runge-KuttaVerfahren 2. Ordnung und Runge-Kutta-Verfahren 4. Ordnung. Experimentieren Sie mit
unterschiedlichen Schrittweiten, vergleichen Sie die Ergebnisse der einzelnen Verfahren.
*/

#include <iostream>
/*
	funktion:	y'(x) = 2y * x
*/
double function(float _x, float _y)
{
	return 2 * _y * _x;
}

/*
	// berechnung vom Differentialgleichungen nach Euler_Cauchy Verfahren
*/
void Euler_Cauchy(float _deltaX)
{
	std::cout << "Euler_Cauchy mit delta = : " << _deltaX << std::endl;
	std::cout << "---------------------------------------------------" << std::endl << std::endl;

	float x = 0;
	float y = 0;

	float xZero = 0;						// x0 = 0
	float yZero = 1;						// y0 = 1

	float round = 4 / _deltaX;

	for (int i = 0; i < round; i++)
	{
		y = function(xZero, yZero) * _deltaX + yZero;
		x = xZero + _deltaX;

		std::cout << "y(" << x << ") = " << y << std::endl << std::endl;

		yZero = y;
		xZero = x;
	}
	std::cout << "---------------------------------------------------" << std::endl << std::endl;

}

void Verbessertes_Euler_Cauchy(float _deltaX)
{
	std::cout << "Verbessertes Euler_Cauchy mit delta = : " << _deltaX << std::endl << std::endl;
	std::cout << "---------------------------------------------------" << std::endl << std::endl;

	float x = 0;
	float y = 0;

	float xZero = 0;						// x0 = 0
	float yZero = 1;						// y0 = 1

	float round = 4 / _deltaX;

	for (int i = 0; i < round; i++)
	{
		y = function(xZero + (_deltaX / 2), yZero + (_deltaX / 2) * function(yZero, xZero)) * _deltaX + yZero;
		x = xZero + _deltaX;

		std::cout << "y(" << x << ") = " << y << std::endl << std::endl;

		yZero = y;
		xZero = x;
	}
	std::cout << "---------------------------------------------------" << std::endl << std::endl;
}

void Runge_Kutta_2_Ordnung(float s)
{
	std::cout << "Runge_Kutta_2_Ordnung: " << std::endl << std::endl;
	std::cout << "---------------------------------------------------" << std::endl << std::endl;

	float x = 0;
	float y = 0;

	float xZero = 0;						// x0 = 0
	float yZero = 1;						// y0 = 1
	float deltaY = 0;

	float k1 = 0;
	float k2 = 0;

	float round = 4 / s;

	for (int i = 0; i < round; i++)
	{
		k1 = function(xZero, yZero);
		k2 = function(xZero + s, yZero + s * k1);

		deltaY = (s / 2) * (k1 + k2);

		std::cout << "deltaY = " << deltaY << std::endl;

		x = xZero + s;
		y = yZero + deltaY;

		std::cout << "y(" << x << ") = " << y << std::endl << std::endl;

		yZero = y;
		xZero = x;
	}
	std::cout << "---------------------------------------------------" << std::endl << std::endl;
}

void Runge_Kutta_4_Ordnung(float s)
{
	std::cout << "Runge_Kutta_4_Ordnung: " << std::endl << std::endl;
	std::cout << "---------------------------------------------------" << std::endl << std::endl;

	float x = 0;
	float y = 0;

	float xZero = 0;						// x0 = 0
	float yZero = 1;						// y0 = 1
	float deltaY = 0;

	float k1 = 0;
	float k2 = 0;
	float k3 = 0;
	float k4 = 0;

	float round = 4 / s;

	for (int i = 0; i < round; i++)
	{
		k1 = function(xZero, yZero);
		k2 = function(xZero + (s / 2), yZero + s * (k1 / 2));
		k3 = function(xZero + (s / 2), yZero + s * (k2 / 2));
		k4 = function(xZero + s, yZero + s * k3);

		deltaY = (s / 6) * (k1 + (2 * k2) + (2 * k3) + k4);

		std::cout << "deltaY = " << deltaY << std::endl;

		x = xZero + s;
		y = yZero + deltaY;

		std::cout << "y(" << x << ") = " << y << std::endl << std::endl;

		yZero = y;
		xZero = x;
	}
	std::cout << "---------------------------------------------------" << std::endl << std::endl;
}

#include <iostream>

int main()
{
	Euler_Cauchy(1);
	Euler_Cauchy(0.5);

	Verbessertes_Euler_Cauchy(1);
	Verbessertes_Euler_Cauchy(0.5);

	Runge_Kutta_2_Ordnung(0.1);
	Runge_Kutta_4_Ordnung(0.1);


	return 0;
}
