#include <iostream>
#include <list>

*
Aufgabe 1
Schreiben Sie ein Programm, welches die n-te Wurzel der Zahl a nach dem Heronverfahren berechnet. Die Parameter n und a sollen dabei vom Nutzer eingegeben werden
können
*/


void nteSqrt()
{
	int n = 2;
	int a = 16;
	float xi = 1;

	float result = 0;

	std::cout << "Enter a number: ";
	std::cin >> a;

	std::cout << "Enter a Sqrt: ";
	std::cin >> n;

	do
	{
		if (result != 0)
		{
			xi = result;
		}

		result = ((n - 1) * pow(xi, n) + a) / (n * pow(xi, n - 1));

	} while (result != xi);

	std::cout << result << std::endl;
}

/*
Aufgabe 2
Schreiben Sie ein Programm, welches alle Primzahlen zwischen 1 und n findet. Der
Parameter n soll dabei vom Nutzer eingegeben werden können. Implementieren Sie mindestens Variante 2 der Vorlesung.
*/

void primenumbers()
{
	int n = 0;
	std::list<int> my_list = {};

	std::cout << "Enter a number: ";
	std::cin >> n;

	for (int i = 2; i < n; i++)
	{
		my_list.push_front(i);
	}

	for (int i = 2; i * i < n; i++)
	{
		for (int k = i; k * i < n; k++)
		{
			my_list.remove(i * k);
		}
	}

	for (int x : my_list)
	{
		std::cout << x << std::endl;
	}
}

void primenumbersArr()
{
	int n = 0;
	int* my_list = new int[n];

	std::cout << "Enter a number: ";
	std::cin >> n;

	for (int i = 2; i < n; i++)
	{
		my_list[i] = i;
	}

	for (int i = 2; i * i < n; i++)
	{
		for (int k = i; k * i < n; k++)
		{
			if (i*k < n)
			{
				my_list[i * k] = -1;
			}
		}
	}

	for (int i = 2; i < n; i++)
	{
		if (my_list[i] != -1)
		{
			std::cout << my_list[i] << std::endl;
		}
	}
}

int main()
{
	primenumbers();
	nteSqrt();

	return 0;
}
